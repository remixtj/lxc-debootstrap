#!/bin/sh

# lxc-debootstrap
# Description : Simple tool to create Debian LXC guests
# URL : https://github.com/tmartinfr/lxc-debootstrap
# Copyright 2013 Thomas Martin <thomas@oopss.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e
LC_ALL=C


###############################################################################
# Help
###############################################################################

usage() {
	cat <<EOT
Usage: $0 NAME

Create LXC container.

Example :
$0 example1
EOT
}


###############################################################################
# Functions
###############################################################################

cache_init() {
	if [ -d "$debootstrap_cache_dir" ]; then
		if [ -f "$debootstrap_cache_dir/etc/debian_version" ] && \
		   [ ! -d "$debootstrap_cache_dir/debootstrap" ]; then
			echo "debootstrap cache dir already exists"
			return 0
		else
			echo "invalidating cache dir"
			rm -rf "$debootstrap_cache_dir"
		fi
	fi

	tmp_cache_dir=$(mktemp -d $debootstrap_cache_dir.XXXXXX)

	deb_out=$(mktemp "/tmp/debootstrap.XXXXXX")
	echo "cache dir does not exists"
	echo "running debootstrap (please wait, output in $deb_out)"
	debootstrap \
		--verbose --variant=minbase --arch=$DEBIAN_ARCH \
		--include libterm-readline-perl-perl,openssh-server,net-tools,netbase,iputils-ping,dnsutils,ifupdown,apt-utils \
		$DEBIAN_SUITE $tmp_cache_dir $DEBIAN_MIRROR >$deb_out
	rm $deb_out

	echo "enabling cache dir"
	mv $tmp_cache_dir $debootstrap_cache_dir
}


###############################################################################
# Main
###############################################################################

if [ $# != 1 ]; then
	usage
	exit 1
else
	lxc_name="$1"
fi

show_var() {
	printf "%-20s %s\n" $1 ${!1}
}

# Configuration variables
LXC_VG_NAME="lxc"
LXC_PATH="/var/lib/lxc"
DEBIAN_MIRROR="http://ftp.debian.org/debian/"
DEBIAN_SUITE=$(lsb_release -s --codename)
DEBIAN_ARCH=$(dpkg --print-architecture)
NETMASK="255.255.255.0"
GATEWAY="10.42.0.254"
BRIDGE_IF="br0"
DNS_RESOLVER="10.42.0.254"
SSH_PUBFILE="/root/.ssh/id_rsa.pub"
CACHE_ROOT="/var/cache/lxc-debootstrap"
FSTYPE="ext4"

# Load global configuration file
if [ -r "/etc/lxc-debootstrap/config" ]; then
	source "/etc/lxc-debootstrap/config"
fi

# Load container configuration file
if [ -r "/etc/lxc-debootstrap/containers/$lxc_name" ]; then
	source "/etc/lxc-debootstrap/containers/$lxc_name"
fi

net_ipaddr="$IPADDR"
net_mask="$NETMASK"
net_hwaddr="$HWADDR"
net_gateway="$GATEWAY"
net_dns_resolver="$DNS_RESOLVER"
net_bridge_if="$BRIDGE_IF"
lxc_vg_name="$LXC_VG_NAME"
lxc_rootpath="$LXC_PATH/$lxc_name"
lxc_rootfs="$lxc_rootpath/rootfs"
lxc_config="$lxc_rootpath/config"
lvm_disksize="$DISKSIZE"
lvm_volpath="/dev/mapper/$LXC_VG_NAME-$lxc_name"
ssh_pubfile="$SSH_PUBFILE"
debian_suite="$DEBIAN_SUITE"
debian_arch="$DEBIAN_ARCH"
debootstrap_cache_dir="$CACHE_ROOT/$DEBIAN_SUITE.$DEBIAN_ARCH"

# Print summary
echo
echo "Container parameters"
echo "--------------------"
show_var lxc_name
show_var debian_suite
show_var debian_arch
show_var lvm_disksize
show_var lvm_volpath
show_var net_ipaddr
show_var net_gateway
show_var net_hwaddr
show_var lxc_rootfs
show_var lxc_config

echo
echo -n "Create ? "
read res
if [ "$res" != 'y' ] && [ "$res" != "Y" ]; then
	echo "Aborting."
	exit 1
fi
echo

cache_init

echo "creating logical volume $lvm_volpath"
lvcreate -L $lvm_disksize -n $lxc_name $lxc_vg_name >/dev/null

echo "creating filesystem on $lvm_volpath"
mkfs.$FSTYPE -q $lvm_volpath

echo "creating root directory $lxc_rootpath"
mkdir $lxc_rootpath

echo "adding entry in /etc/fstab"
echo "$lvm_volpath $lxc_rootpath ext4 defaults 0 2" >>/etc/fstab

echo "mount $lvm_volpath on $lxc_rootpath using fstab"
mount $lxc_rootpath

echo "populating $lxc_rootfs"
cp -pR $debootstrap_cache_dir/ $lxc_rootfs

echo "networking : setting hostname"
echo $lxc_name >"$lxc_rootfs/etc/hostname"

echo "networking : setting DNS resolver $net_resolver"
echo "nameserver $net_dns_resolver" >"$lxc_rootfs/etc/resolv.conf"

echo "networking : setting IP configuration"
cat <<EOT >"$lxc_rootfs/etc/network/interfaces"
auto eth0
iface eth0 inet static
    address $net_ipaddr
    netmask $net_mask
    gateway $net_gateway
EOT

echo "networking : creating hosts file"
cat <<EOT >"$lxc_rootfs/etc/hosts"
127.0.0.1	localhost
127.0.1.1	$lxc_name
EOT

echo "disabling useless tty"
sed -i 's/^[1-6]:/#&/' "$lxc_rootfs/etc/inittab"

echo "remove pointless services in a container"
chroot $lxc_rootfs /usr/sbin/update-rc.d -f umountfs remove >/dev/null
chroot $lxc_rootfs /usr/sbin/update-rc.d -f hwclock.sh remove >/dev/null
chroot $lxc_rootfs /usr/sbin/update-rc.d -f hwclockfirst.sh remove >/dev/null
chroot $lxc_rootfs /usr/sbin/update-rc.d -f checkroot.sh remove >/dev/null
chroot $lxc_rootfs /usr/sbin/update-rc.d -f umountroot remove >/dev/null

echo "disabling root password"
chroot $lxc_rootfs passwd -l root >/dev/null

echo "adding SSH keys"
mkdir -p -m 700 "$lxc_rootfs/root/.ssh/"
[ -f "$ssh_pubfile" ] && cp "$ssh_pubfile" "$lxc_rootfs/root/.ssh/authorized_keys"

echo "setting APT configuration"
cat <<EOT >"$lxc_rootfs/etc/apt/sources.list"
deb $debian_mirror $debian_suite main
EOT

echo "updating packages"
{ chroot $lxc_rootfs apt-get -qq update;
chroot $lxc_rootfs apt-get -qq upgrade; } || /bin/true

echo "creating configuration file $lxc_config"
cat <<EOT >$lxc_config
lxc.utsname = $lxc_name
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = $bridge_if
lxc.network.name = eth0
lxc.network.hwaddr = $net_hwaddr
lxc.pts = 1024
#lxc.console =
lxc.tty = 4
lxc.mount.entry=proc $lxc_rootfs/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts $lxc_rootfs/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs $lxc_rootfs/sys sysfs defaults  0 0
lxc.rootfs = $lxc_rootfs

# devices
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOT

echo "starting container with lxc-start"
lxc-start -d -n $lxc_name

echo "Done."

